# -*- coding: utf-8 -*-
"""DS2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G0aaCfv--oRjShvvh39T7IiJFqyKsUFA
"""

# Installation via pip
!pip install pandas numpy matplotlib seaborn scikit-learn jupyter

"""#**Pandas**
Bibliothèque open-source Python dédiée à la manipulation et à l’analyse de données, offrant des structures de données puissantes comme les DataFrames pour travailler avec des données tabulaires, facilitant le nettoyage, la transformation et l’exploration des données.​

#**Numpy**
Bibliothèque fondamentale en Python pour le calcul scientifique, elle fournit un support efficace pour les tableaux multidimensionnels (ndarray) et des fonctions mathématiques hautes performances pour manipuler ces tableaux [connaissance générale].

#**Matplotlib**
Bibliothèque Python pour créer des visualisations graphiques statiques, animées ou interactives, particulièrement utile pour tracer des graphiques en 2D et explorer les données visuellement [connaissance générale].

#**Seaborn**
Bibliothèque basée sur Matplotlib qui simplifie la création de graphiques statistiques attrayants et complexes avec une syntaxe plus simple, offrant des visualisations avancées pour l'analyse des données [connaissance générale].

#**Scikit-learn**
Bibliothèque Python open-source dédiée à l’apprentissage automatique (machine learning) fournissant des outils pour la classification, la régression, le clustering, la réduction de dimension, et plus, avec une interface simple et cohérente [connaissance générale].

#**Jupyter**
Environnement interactif open-source pour la création et le partage de documents contenant du code source, des équations, des visualisations et du texte, couramment utilisé pour le développement et la documentation en data science [connaissance générale].
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Charger un dataset en ligne (exemple : ventes d'une entreprise)
url = "https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv"
df = pd.read_csv(url)

"""| Rang | Pays        | PIB nominal 2024 (en dollars) |
| ---- | ----------- | ----------------------------- |
| 1    | États-Unis  | 27 720 700 000 000            |
| 2    | Chine       | 17 794 800 000 000            |
| 3    | Allemagne   | 4 525 700 000 000             |
| 4    | Japon       | 4 204 490 000 000             |
| 5    | Inde        | 3 567 550 000 000             |
| 6    | Royaume-Uni | 3 380 850 000 000             |
| 7    | France      | 3 051 830 000 000             |
| 8    | Italie      | 2 300 940 000 000             |
| 9    | Brésil      | 2 173 670 000 000             |
| 10   | Canada      | 2 142 470 000 000             |

#**HEAD**
This function returns the first n rows for the object based
on position. It is useful for quickly testing if your object
has the right type of data in it.
"""

# Afficher les premières lignes
print(df.head())

"""#**INFO**
Print a concise summary of a DataFrame.

This method prints information about a DataFrame including
the index dtype and columns, non-null values and memory usage.
"""

# Informations sur le dataset
print(df.info())

"""#**Describe**
Generate descriptive statistics.

Descriptive statistics include those that summarize the central
tendency, dispersion and shape of a
dataset's distribution, excluding NaN values.

Analyzes both numeric and object series, as well
as DataFrame column sets of mixed data types. The output
will vary depending on what is provided. Refer to the notes
below for more detail.
"""

# Statistiques descriptives
print(df.describe())

# Statistiques pour une colonne spécifique
colonne = df['Value']  # Adapter selon vos données

print(f"Moyenne: {colonne.mean():.2f}")
print(f"Médiane: {colonne.median():.2f}")
print(f"Mode: {colonne.mode()[0]:.2f}")
print(f"Écart-type: {colonne.std():.2f}")
print(f"Variance: {colonne.var():.2f}")
print(f"Min: {colonne.min():.2f}")
print(f"Max: {colonne.max():.2f}")

"""#**Visualisation de statistique descreptive**"""

# Configuration du style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)

# Créer une figure avec plusieurs sous-graphiques
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

# 1. Histogramme
axes[0, 0].hist(colonne, bins=30, edgecolor='black', alpha=0.7)
axes[0, 0].set_title('Distribution des valeurs', fontsize=14, fontweight='bold')
axes[0, 0].set_xlabel('Valeur')
axes[0, 0].set_ylabel('Fréquence')

# Ajouter la moyenne et la médiane
axes[0, 0].axvline(colonne.mean(), color='red', linestyle='--',
                   label=f'Moyenne: {colonne.mean():.2f}')
axes[0, 0].axvline(colonne.median(), color='green', linestyle='--',
                   label=f'Médiane: {colonne.median():.2f}')
axes[0, 0].legend()

# 2. Boxplot
axes[0, 1].boxplot(colonne.dropna(), vert=True)
axes[0, 1].set_title('Boxplot - Détection des outliers', fontsize=14, fontweight='bold')
axes[0, 1].set_ylabel('Valeur')

# 3. Densité
colonne.plot(kind='density', ax=axes[1, 0])
axes[1, 0].set_title('Courbe de densité', fontsize=14, fontweight='bold')
axes[1, 0].set_xlabel('Valeur')

# 4. QQ-plot (pour tester la normalité)
from scipy import stats
stats.probplot(colonne.dropna(), dist="norm", plot=axes[1, 1])
axes[1, 1].set_title('Q-Q Plot (Test de normalité)', fontsize=14, fontweight='bold')

plt.tight_layout()
plt.show()